// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  walletAddress String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  sessions    Session[]
  devices     Device[]
  tokens      Token[]
  expenses    Expense[]
  budgets     Budget[]
  mpesaTransactions MpesaTransaction[]
  cryptoTransactions CryptoTransaction[]
}

model Session {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Device {
  id          Int      @id @default(autoincrement())
  userId      Int
  deviceId    String
  name        String?
  ipAddress   String?
  userAgent   String?
  lastActive  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  type        String
  expiresAt   DateTime
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  category    String
  date        DateTime @default(now())
  description String?
  tags        String[]
  userId      Int
  mpesaTransactionId String?
  cryptoTransactionHash String?

  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Budget {
  id          Int      @id @default(autoincrement())
  category    String
  limit       Float
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MpesaTransaction {
  id          Int      @id @default(autoincrement())
  transactionId String @unique
  amount      Float
  date        DateTime
  phoneNumber String
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CryptoTransaction {
  id          Int      @id @default(autoincrement())
  transactionHash String @unique
  amount      Float
  date        DateTime
  walletAddress String
  userId      Int

  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
